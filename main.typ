#import "src/layout/standard.typ": setup_layout
#import "src/course_work/template.typ": project

#show: setup_layout
#show: project.with(
  start_label: <start>,
  student_name: "Жадан О. А.",
  student_name_genitive: "Жадану Олегу Анатолійовичу",
  group: "ІПЗ-21-9-д",
  course_num: "IV",
  city: "Кам’янське",
  department_name: "Технолого-економічне",
  commission_name: "Програмного забезпечення та прикладної математики",
  commission_name_short: "ІПЗ та ПМ",
  knowledge_branch: "12 Інформаційні технології",
  specialty: "121 “Інженерія програмного забезпечення”",
  discipline: "Конструювання програмного забезпечення",
  title: "Практичне застосування патерну проектування Strategy у мові програмування Python",
  work_due_to: "02.12.2024",
  task_received_at: "24.02.2024",
  supervisor_name: "Кравець М. Ю.",
  supervisor_title: "Викладач",
  commission_head_name: "Пушко І. І.",
  commission_members: (
    "Королькова Ю. С.",
    "Роженюк О.В."
  ),
  calendar_plan_data: (
    ("Аналіз проблемної галузі та постановка задачі", "01.10.2024 - 10.10.2024"),
    ("Опис прийнятих проектних рішень", "10.10.2024 - 15.10.2024"),
    ("Розробка програми", "15.10.2024 - 25.10.2024"),
    ("Опис розробленої програми", "25.10.2024 - 05.11.2024"),
    ("Графічна частина (презентація), вступ, висновки, перелік посилань, реферат", "05.11.2024 - 11.11.2024"),
    ("Попередній захист роботи", "25.11.2024"),
    ("Захист роботи", "02.12.2024"),
  ),
  initial_data: [
   Дослідити обрану предметну галузь та спроектувати концептуальну, логічну та фізичну моделі даних, відповідно до вимог цієї галузі. На основі розроблених моделей створити програмний додаток на Python, який демонструватиме роботу патерну проектування Strategy. Програма має містити кілька альтернативних стратегій для виконання певних дій у рамках предметної області, дозволяючи обирати стратегію під час виконання програми.
  ]
)

#heading(level: 1, numbering: none, "ВСТУП")

Сучасне програмування вимагає гнучких, масштабованих і легких у підтримці рішень, що особливо актуально у випадках розробки великих програмних продуктів та архітектур. У зв’язку з постійним ростом складності завдань, які вирішують програмні системи, надзвичайно важливим стає вміння правильно організувати код, використовуючи надійні підходи до структуризації. Одним із ключових напрямів в архітектурі програмних додатків є використання патернів проектування (англ. *design patterns*). Патерни проектування дозволяють стандартизувати архітектурні рішення, що робить код більш зрозумілим для розробників, скорочує час на впровадження змін та підвищує загальну надійність програмного продукту.

Патерн проектування "Стратегія" (англ. *Strategy pattern*) є одним із таких патернів, що належать до класу поведінкових. Він спрямований на динамічне визначення поведінки об'єкта шляхом заміни однієї реалізації на іншу під час виконання програми. Основна ідея патерну полягає в тому, щоб створити абстракцію для різних алгоритмів і дозволити клієнту вибирати та змінювати алгоритм на льоту, без потреби вносити зміни до коду самого клієнта. Це дозволяє знизити зв’язність компонентів системи, що в свою чергу полегшує підтримку та розширення функціоналу. Важливість цього патерну проявляється у випадках, коли одна задача може мати кілька варіантів розв’язання, і необхідно вибрати найбільш оптимальний або гнучкий варіант залежно від умов використання програми.

У цій курсовій роботі буде детально розглянуто патерн проектування "Стратегія" та його застосування в програмуванні. Зокрема, буде проаналізовано, як його можна інтегрувати для реалізації вибору алгоритму на основі поточних потреб користувача або зовнішніх обставин. Також буде показано, яким чином цей патерн дозволяє зробити код більш модульним, легким для читання та супроводження, а також як він сприяє дотриманню принципів об’єктно-орієнтованого програмування, таких як *SOLID*-принципи. Розгляд цього патерну дозволить зрозуміти його місце у розробці програмних продуктів, а також його переваги та недоліки, особливо у порівнянні з іншими підходами до організації коду.

Метою курсової роботи є вивчення основних принципів патерну "Стратегія", його структури, особливостей реалізації та прикладних варіантів використання. У процесі дослідження буде створено програмний додаток, що продемонструє роботу патерну "Стратегія" у реальних умовах.
#pagebreak()
#heading("Аналіз проблемної галузі та постановка задачі")
#align(center, heading(level: 2, "Основні поняття"))

Об'єктно-орієнтоване програмування (ООП) — це парадигма програмування, яка використовує "об'єкти" — дані, організовані в класи, що містять поля та методи, для проектування програм та застосунків. Основна мета ООП полягає в створенні програм, де дані та операції над ними є організованими в єдиний блок, що дозволяє зручніше управляти та розширювати програмний код. ООП допомагає моделювати реальні об'єкти та їх взаємодію, що дозволяє зменшити складність розробки та підтримки програмного забезпечення.

Важливими принципами ООП є: наслідування, поліморфізм, інкапсуляція та абстракція. ООП дає можливість створювати багатократні шаблони для використання класів, що дозволяє зменшити дублювання коду. В Python ці принципи реалізуються за допомогою класів, наслідування, і поліморфізму, що забезпечує масштабованість і гнучкість.

Python підтримує об'єктно-орієнтований підхід, де основними будуть класи і об'єкти. Однак важливою особливістю є те, що Python підтримує динамічну типізацію та інтерпретацію, що надає більшу гнучкість у порівнянні з більш строгими мовами, такими як C++, C\#, Java та інші. 

Абстракція дозволяє приховати складні деталі реалізації, залишаючи тільки основні, важливі для користувача частини системи. Наприклад, абстрактні класи не можуть бути інстанційовані, але надають шаблон для наслідування конкретними класами. У Python це досягається через використання абстрактних базових класів (ABC) з модулем abc, де абстрактні методи визначаються як методи без реалізації, що мають бути перевизначені в дочірніх класах.

#parbreak()

*pip* — це пакетний менеджер для Python, який використовується для інсталяції та керування бібліотеками та залежностями програм. Пакети в Python — це набори модулів або скриптів, які реалізують певний функціонал, що можна використовувати в різних програмах. Використання pip дозволяє зручно інсталювати, оновлювати або видаляти пакети з Python Package Index (PyPI), що є центральним репозиторієм для Python-бібліотек.

Це надзвичайно важливо, оскільки більшість програм сьогодні використовують зовнішні бібліотеки для вирішення різноманітних задач — від роботи з базами даних до обробки зображень чи навіть машинного навчання. За допомогою pip програмісти можуть швидко інтегрувати готові рішення та фокуватися на бізнес-логіці, знижуючи час, необхідний для розробки та тестування. Оскільки Python має величезну екосистему бібліотек, правильне керування залежностями через pip є критично важливим для підтримки стабільності та безпеки програмного забезпечення.

*PyCharm* — це популярне середовище розробки для Python, яке надає потужні інструменти для налагодження, тестування та аналізу коду. Воно підтримує автоматичне завершення коду, підсвічування синтаксису, інтеграцію з системами контролю версій, такими як Git, і має вбудовану підтримку для роботи з базами даних та віртуальними середовищами Python.

*VS Code* — це легке та потужне середовище розробки, яке підтримує Python завдяки встановленню відповідних розширень. VS Code є популярним вибором серед розробників завдяки своїй гнучкості, швидкості роботи та величезному набору плагінів, що дозволяють налаштувати середовище для різних типів проектів. За допомогою таких розширень, як Python Extension, VS Code надає вбудовану підтримку для відладки, автодоповнення та роботи з віртуальними середовищами Python.

*Патерн проектування* — це загальне повторюване рішення для часто зустрічаємої проблеми в архітектурі або дизайні програмного забезпечення. Використання патернів проектування дозволяє розробникам застосовувати ефективні, перевірені рішення для загальних задач, знижуючи складність і підвищуючи гнучкість систем.

*Патерн Strategy (Стратегія)* — це поведінковий патерн проектування, який дозволяє визначити сімейство алгоритмів, інкапсулювати кожен з них окремо та зробити їх взаємозамінними. У цьому патерні стратегія означає вибір конкретного алгоритму для виконання певного завдання, залежно від умов. В Python цей патерн часто реалізується за допомогою абстрактних класів або інтерфейсів, де різні реалізації алгоритмів можуть бути замінені без змін в основному класі. Це дозволяє змінювати поведінку об'єкта в залежності від конкретних вимог без зміни його внутрішньої структури.

#parbreak()
#align(center, heading(level: 2, "Історія виникнення та розвитку патерна Strategy"))

Патерн проектування Strategy належить до групи поведінкових патернів і був вперше описаний в книзі @Gamma1994DesignPatterns Книга стала основним джерелом для розвитку об'єктно-орієнтованого програмування та патернів проектування, що дозволило стандартизувати багато рішень, які повторюються в розробці програмного забезпечення.

Патерн Strategy виник в результаті необхідності надавати програмам гнучкість у виборі алгоритмів або варіантів обчислень, не змінюючи їх основну структуру. На момент написання книги "Design Patterns", багато програм розроблялися з використанням жорстко закодованих алгоритмів, що ускладнювало їх оновлення та підтримку. Стратегії дозволяють абстрагувати алгоритм від його реалізації, зробивши систему більш гнучкою та легко розширюваною.

Протягом наступних років патерн Strategy знайшов широке застосування в різних галузях програмування, зокрема в області геймдизайну, обробки даних і фінансових системах. Сьогодні його часто використовують для заміни статичних алгоритмів на динамічні, що дозволяє адаптувати програму до змінних умов.
#parbreak()
#align(center, heading(level: 2, "Формування проблеми та постановка задачі"))





#parbreak()
#align(center, heading(level: 2, "Середовище розробки"))

*Python* — це потужна, високоабстрактна мова програмування, яка набрала популярності завдяки своїй простоті, зрозумілому синтаксису та широкій підтримці бібліотек. Python часто використовують для розробки веб-додатків, наукових розрахунків, автоматизації завдань, а також для роботи з даними.

*VS Code* — це популярне середовище розробки (IDE), яке підтримує Python завдяки спеціальному розширенню. Воно має зручний інтерфейс, інтегровану підтримку Git, налагоджувач, а також дозволяє працювати з різноманітними мовами програмування. Встановивши розширення для Python, VS Code пропонує автоматичне доповнення коду, виведення помилок і підтримку віртуальних середовищ.

Основні пакети Python:

 - *json* — стандартна бібліотека Python для роботи з JSON (JavaScript Object Notation), що дозволяє серіалізувати дані в формат JSON і зчитувати їх з файлів. Це корисно при роботі з веб-додатками та API, оскільки JSON є одним із найпоширеніших форматів передачі даних.

 - *csv* — бібліотека для роботи з CSV (Comma-Separated Values) файлами. Вона дозволяє легко читати та записувати табличні дані у форматі CSV, що є популярним для зберігання та обміну даними між різними програмами (наприклад, між електронними таблицями та базами даних).

 - *xml* — бібліотека для обробки XML (Extensible Markup Language) документів. За допомогою цього пакету можна працювати з XML-даними, парсити їх, змінювати або генерувати нові документи.

 - *rich* — потужна бібліотека для виведення кольорових та стилізованих текстів у термінал. Вона підтримує виведення таблиць, прогрес-барів, візуальних компонентів, що робить взаємодію з користувачем значно зручнішою та інтуїтивно зрозумілою.
#pagebreak()
#heading("Опис прийнятих проектних рішень")
#align(center, heading(level: 2, "Концептуальна модель проблемної галузі"))





#parbreak()
#align(center, heading(level: 2, "Логічна модель проблемної галузі"))





#parbreak()
#align(center, heading(level: 2, "Фізична модель проблемної галузі"))




#parbreak()
#heading(numbering: none, "ВИСНОВОК")


#bibliography(
  "ref/books.bib",
  title: [Reference source]
)

#pagebreak()
#heading(numbering: none, "Додаток A")





#pagebreak()
#heading(numbering: none, "Додаток Б (Source Code)")




#parbreak()
